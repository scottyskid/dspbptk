#!/usr/bin/env python3
#	dspbptk - Dyson Sphere Program Blueprint Toolkit
#	Copyright (C) 2021-2022 Johannes Bauer
#
#	This file is part of dspbptk.
#
#	dspbptk is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	dspbptk is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
from MultiCommand import MultiCommand
from ActionBlueprintToJSON import ActionBlueprintToJSON
from ActionJSONToBlueprint import ActionJSONToBlueprint
from ActionDump import ActionDump
from ActionEdit import ActionEdit
from ActionRecreateHash import ActionRecreateHash
from ActionEditsOverride import ActionEditsOverride



mc = MultiCommand()

def genparser(parser):
	parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite output file if it exists.")
	parser.add_argument("-p", "--pretty-print", action = "store_true", help = "Create a pretty-printed output JSON file.")
	parser.add_argument("--ignore-corrupt", action = "store_true", help = "Do not validate the checksum when reading the blueprint file.")
	parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increase verbosity.")
	parser.add_argument("infile", help = "Input blueprint text file")
	parser.add_argument("outfile", help = "Output JSON file")
mc.register("bp2json", "Convert a blueprint to JSON", genparser, action = ActionBlueprintToJSON)

def genparser(parser):
	parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite output file if it exists.")
	parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increase verbosity.")
	parser.add_argument("infile", help = "Input JSON file")
	parser.add_argument("outfile", help = "Output blueprint text file")
mc.register("json2bp", "Convert a JSON document to blueprint", genparser, action = ActionJSONToBlueprint)

def genparser(parser):
	parser.add_argument("--ignore-corrupt", action = "store_true", help = "Do not validate the checksum when reading the blueprint file.")
	parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increase verbosity.")
	parser.add_argument("infile", nargs = "+", help = "Input blueprint text file(s)")
mc.register("dump", "Dump some information about a blueprint", genparser, action = ActionDump)

def genparser(parser):
	parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite output file if it exists.")
	parser.add_argument("--short-desc", metavar = "description", help = "Set short description to this value.")
	parser.add_argument("--ignore-corrupt", action = "store_true", help = "Do not validate the checksum when reading the blueprint file.")
	parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increase verbosity.")
	parser.add_argument("infile", help = "Input blueprint text file")
	parser.add_argument("outfile", help = "Output blueprint text file")
mc.register("edit", "Edit a blueprint", genparser, action = ActionEdit)

def genparser(parser):
	parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite output file if it exists.")
	parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increase verbosity.")
	parser.add_argument("file", help = "The blueprint text file")
mc.register("update_hash", "Update the Blueprint Hash", genparser, action = ActionRecreateHash)

def genparser(parser):
	parser.add_argument("-f", "--force", action = "store_true", help = "Overwrite output file if it exists.")
	parser.add_argument("directory", help = "The blueprint text file")
mc.register("edits_override", "Override all edits with the '--edit' suffix", genparser, action = ActionEditsOverride)


mc.run(sys.argv[1:])
